// Generated by CoffeeScript 1.6.1
(function() {
  var StormKeeper, instance;

  StormKeeper = (function() {
    var cleanupInterval, ruleschema, tokenMaxDuration, tokenschema, util, uuid, validate;

    validate = require('json-schema').validate;

    uuid = require('node-uuid');

    util = require('util');

    cleanupInterval = 5 * 1000;

    tokenMaxDuration = 240 * 1000;

    tokenschema = {
      name: "tokens",
      type: "object",
      additionalProperties: false,
      properties: {
        id: {
          type: "string",
          "required": false
        },
        name: {
          type: "string",
          "required": false
        },
        domainId: {
          type: "string",
          "required": true
        },
        identityId: {
          type: "string",
          "required": true
        },
        rulesId: {
          type: "string",
          "required": true
        },
        expiry: {
          type: "number",
          "required": true
        },
        lastModified: {
          type: "string",
          "required": false
        },
        userData: {
          type: "array",
          items: {
            type: "object",
            required: false,
            additionalProperties: true,
            properties: {
              accountId: {
                "type": "string",
                "required": false
              },
              userEmail: {
                "type": "string",
                "required": false
              }
            }
          }
        }
      }
    };

    ruleschema = {
      name: "rules",
      type: "object",
      additionalProperties: false,
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        name: {
          "type": "string",
          "required": false
        },
        rules: {
          "type": "array",
          "required": true
        },
        role: {
          "type": "string",
          "required": true
        }
      }
    };

    function StormKeeper() {
      var _this = this;
      util.log('stormkeeper constructor called');
      this.db = {
        tokensdb: require('dirty')('/var/stormkeeper/tokens.db'),
        rulesdb: require('dirty')('/var/stormkeeper/rules.db')
      };
      this.db.tokensdb._writeStream.on('error', function(err) {
        return util.log(err);
      });
      this.db.rulesdb._writeStream.on('error', function(err) {
        return util.log(err);
      });
      this.db.tokensdb.on('load', function() {
        util.log('loaded tokens.db');
        return this.forEach(function(key, val) {
          if (val) {
            return util.log('Tokens found ' + key);
          }
        });
      });
      this.db.rulesdb.on('load', function() {
        util.log('loaded rules.db');
        return this.forEach(function(key, val) {
          if (val) {
            return util.log('Rules found ' + key);
          }
        });
      });
      setInterval((function() {
        return _this.updateTokenExpiry(cleanupInterval);
      }), cleanupInterval);
    }

    StormKeeper.prototype["new"] = function() {
      var id;
      id = uuid.v4();
      return id;
    };

    StormKeeper.prototype.newEntry = function(entry, id) {
      if (id) {
        entry.id = id;
      } else {
        entry.id = this["new"]();
      }
      return entry;
    };

    StormKeeper.prototype.getRelativeDB = function(type) {
      var keeperDb;
      util.log('DB type: ' + type);
      keeperDb = '';
      switch (type) {
        case "TOKENS":
          keeperDb = this.db.tokensdb;
          break;
        case "RULES":
          keeperDb = this.db.rulesdb;
      }
      return keeperDb;
    };

    StormKeeper.prototype.checkentryschema = function(type, entry, callback) {
      var entryschema, error, result;
      if (type === 'TOKENS') {
        entryschema = tokenschema;
      }
      if (type === 'RULES') {
        util.log('performing ruleschema validation on a new entry posting');
        entryschema = ruleschema;
        util.log('siva');
      }
      if (entryschema != null) {
        util.log('performing entryschema validation on a new entry posting');
        if (!entry) {
          return new Error("Entry data is missing");
        }
        result = validate(entry, entryschema);
        error = new Error("Invalid entry posting!");
        if (!result.valid) {
          throw error;
        }
        return callback(result);
      } else {
        return callback(new Error("No valid schema to compare:"));
      }
    };

    StormKeeper.prototype.getEntriesById = function(type, id, callback) {
      var entry, keeperdb,
        _this = this;
      util.log("looking up entry ID: " + id);
      keeperdb = this.getRelativeDB(type);
      util.log("siva1 looking up entry ID: " + id);
      entry = this.db.keeperdb.get(id);
      util.log("siva2 looking up entry ID: " + id);
      if (entry != null) {
        return this.checkentryschema(type, entry, function(result) {
          util.log(result);
          if (!result.valid) {
            return callback(new Error("Invalid entry retrieved: " + result.errors));
          }
          return callback(entry);
        });
      } else {
        return callback(new Error("Entry not found: " + entry.id));
      }
    };

    StormKeeper.prototype.getTokens = function() {
      var res;
      res = {
        tokens: []
      };
      this.db.tokensdb.forEach(function(key, val) {
        if (val) {
          res.tokens.push(val);
        }
        return util.log('listing...');
      });
      return res;
    };

    StormKeeper.prototype.getRulesbyRole = function(usertype, callback) {
      var _this = this;
      util.log('Entry for the role' + usertype);
      if (usertype != null) {
        util.log('Entry for the role' + usertype);
        this.db.rulesdb.forEach(function(key, val) {
          var ruleEntry, ruleKey, ruleValue;
          ruleEntry = _this.db.rulesdb.get(key);
          util.log('Entry for the role' + usertype);
          for (ruleKey in ruleEntry) {
            ruleValue = ruleEntry[ruleKey];
            if (usertype === ruleKey) {
              util.log('Entry for the role' + usertype);
              return callback(ruleEntry);
            }
          }
          return util.log('Entry for the role' + usertype);
        });
      }
      return callback(new Error("Entry not found for the role: " + usertype));
    };

    StormKeeper.prototype.getRules = function(callback) {
      var res;
      res = {
        rules: []
      };
      this.db.rulesdb.forEach(function(key, val) {
        if (val) {
          res.rules.push(val);
        }
        return util.log('listing...');
      });
      return callback(res);
    };

    StormKeeper.prototype.add = function(type, entry, callback) {
      var _this = this;
      if ((type != null) && (entry != null) && entry.id) {
        util.log(util.inspect('siva:' + entry.id));
        return this.checkentryschema(type, entry, function(error) {
          var keeperdb;
          util.log(util.inspect(entry));
          if (!(error instanceof Error)) {
            keeperdb = _this.getRelativeDB(type);
            util.log(util.inspect(entry.id));
            return keeperdb.set(entry.id, entry, function() {
              return callback(entry);
            });
          } else {
            util.log('entry check: ' + error);
            return callback(new Error("" + entry.id + " entry not added!"));
          }
        });
      } else {
        return callback(new Error("Invalid entry!!"));
      }
    };

    StormKeeper.prototype.update = function(type, entry, callback) {
      var _this = this;
      if ((type != null) && (entry != null) && entry.id) {
        return this.add(type, entry, function(res) {
          if (callback != null) {
            return callback(res);
          }
        });
      } else {
        if (callback != null) {
          return callback(new Error("Could not find ID! " + id));
        }
      }
    };

    StormKeeper.prototype.remove = function(type, entry, callback) {
      var keeperdb,
        _this = this;
      util.log('StormKeeper in DEL entry');
      keeperdb = this.getRelativeDB(type);
      if (entry != null) {
        return this.db.keeperdb.rm(entry.id, function() {
          util.log("removed entry ID: " + entry.id);
          return callback({
            result: 200
          });
        });
      }
    };

    StormKeeper.prototype.DecrementExpiryInToken = function(token, connectionTick) {
      var tokenKey, tokenValue, _results,
        _this = this;
      util.log('StormKeeper in cleanup tokens' + connectionTick);
      _results = [];
      for (tokenKey in token) {
        tokenValue = token[tokenKey];
        if (tokenKey === 'expiry') {
          token[tokenKey] = token[tokenKey] - connectionTick;
          util.log(util.inspect(token[tokenKey]));
          if (token[tokenKey] < 1) {
            this.db.tokensdb.rm(token.id, function() {});
            _results.push(util.log("removed token ID: " + token.id));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    StormKeeper.prototype.resetTokenExpiry = function(token) {
      var tokenEntry, tokenKey, tokenValue, _results;
      try {
        util.log("resetTokenExpiry for " + token.id);
        tokenEntry = this.db.tokensdb.get(token.id);
        if (tokenEntry) {
          _results = [];
          for (tokenKey in tokenEntry) {
            tokenValue = tokenEntry[tokenKey];
            if (tokenKey === 'expiry') {
              tokenEntry[tokenKey] = tokenMaxDuration;
              _results.push(util.log(tokenEntry));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      } catch (err) {
        return util.log(err);
      }
    };

    StormKeeper.prototype.updateTokenExpiry = function(connectionTick) {
      var res;
      try {
        this.db.tokensdb.forEach(function(key, val) {
          var entry;
          entry = db.get(key);
          if (entry) {
            return this.DecrementExpiryInToken(entry);
          }
        });
        return res = this.getTokens();
      } catch (err) {
        return util.log(err);
      }
    };

    return StormKeeper;

  })();

  instance = null;

  module.exports = function(args) {
    if (instance == null) {
      instance = new StormKeeper(args);
    }
    return instance;
  };

}).call(this);
