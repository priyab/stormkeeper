// Generated by CoffeeScript 1.7.1
(function() {
  var StormAgent, StormData, StormKeeper, StormRegistry, StormRule, StormRulesRegistry, StormToken, StormTokenRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormAgent = require('stormagent');

  StormData = StormAgent.prototype.StormData;

  StormToken = (function(_super) {
    var schema;

    __extends(StormToken, _super);

    schema = {
      name: "tokens",
      type: "object",
      additionalProperties: false,
      properties: {
        name: {
          type: "string",
          required: false
        },
        domainId: {
          type: "string",
          required: true
        },
        identityId: {
          type: "string",
          required: true
        },
        ruleId: {
          type: "string",
          required: true
        },
        validity: {
          type: "number",
          required: true
        },
        lastModified: {
          type: "string",
          required: false
        },
        userData: {
          type: "array",
          items: {
            type: "object",
            required: false,
            additionalProperties: true,
            properties: {
              accountId: {
                type: "string",
                required: false
              },
              userEmail: {
                type: "string",
                required: false
              }
            }
          }
        }
      }
    };

    function StormToken(id, data) {
      StormToken.__super__.constructor.call(this, id, data, schema);
    }

    return StormToken;

  })(StormData);

  StormRule = (function(_super) {
    var schema;

    __extends(StormRule, _super);

    schema = {
      name: "rules",
      type: "object",
      additionalProperties: false,
      properties: {
        id: {
          type: "string",
          required: false
        },
        name: {
          type: "string",
          required: false
        },
        rules: {
          type: "array",
          required: true
        },
        role: {
          type: "string",
          required: true
        }
      }
    };

    function StormRule(id, data) {
      StormRule.__super__.constructor.call(this, id, data, schema);
    }

    return StormRule;

  })(StormData);

  StormRegistry = StormAgent.prototype.StormRegistry;

  StormTokenRegistry = (function(_super) {
    __extends(StormTokenRegistry, _super);

    function StormTokenRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormToken(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(token) {
        if (token.destroy != null) {
          return token.destroy();
        }
      });
      StormTokenRegistry.__super__.constructor.call(this, filename);
    }

    StormTokenRegistry.prototype.get = function(key) {
      var entry;
      return entry = StormTokenRegistry.__super__.get.call(this, key);
    };

    return StormTokenRegistry;

  })(StormRegistry);

  StormRulesRegistry = (function(_super) {
    __extends(StormRulesRegistry, _super);

    function StormRulesRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new StormToken(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(rule) {});
      StormRulesRegistry.__super__.constructor.call(this, filename);
    }

    return StormRulesRegistry;

  })(StormRegistry);

  StormKeeper = (function(_super) {
    __extends(StormKeeper, _super);

    function StormKeeper() {
      StormKeeper.__super__.constructor.apply(this, arguments);
      this["import"](module);
      this.log('stormkeeper constructor called');
      this.tokens = new StormTokenRegistry("" + this.config.datadir + "/tokens.db");
      this.rules = new StormRulesRegistry("" + this.config.datadir + "/rules.db");
    }

    StormKeeper.prototype.status = function() {
      var state;
      state = StormKeeper.__super__.status.apply(this, arguments);
      state.tokens = this.tokens.list();
      state.rules = this.rules.list();
      return state;
    };

    StormKeeper.prototype.run = function(config) {

      /*
      if config?
          @log 'run called with:', config
          res = validate config, schema
          @log 'run - validation of runtime config:', res
          @config = extend(@config, config) if res.valid
       */
      StormKeeper.__super__.run.call(this, config);
      return this.tokens.expires(this.config.repeatdelay);
    };

    StormKeeper.prototype.StormToken = StormToken;

    StormKeeper.prototype.StormRule = StormRule;

    StormKeeper.prototype.authorize = function(object, update) {
      var err, match, res;
      this.log("authorize: ", object);
      if (object instanceof Error) {
        throw object;
      }
      if (object instanceof StormToken) {
        try {
          match = this.rules.get(object.data.ruleId);
          res = this.tokens.add(null, object);
        } catch (_error) {
          err = _error;
          this.log("error: ", err);
          return new Error("invalid reference to ruleId!");
        }
      }
      if (object instanceof StormRule) {
        return res = this.rules.add(null, object);
      }
    };

    StormKeeper.prototype.revoke = function(object) {
      var err, match, res;
      if (object != null) {
        if (object instanceof StormToken) {
          this.tokens.remove(object.id);
          try {
            match = this.rules.get(object.data.ruleId);
            res = this.tokens.add(null, object);
          } catch (_error) {
            err = _error;
            this.log("error: ", err);
            return new Error("invalid reference to ruleId!");
          }
        }
        if (object instanceof StormRule) {
          res = this.rules.add(null, object);
        }
      }
      return res;
    };

    return StormKeeper;

  })(StormAgent);

  module.exports = StormKeeper;

}).call(this);
