// Generated by CoffeeScript 1.7.1
(function() {
  var stormkeeper;

  stormkeeper = require('./stormkeeper')(this.include);

  this.include = function() {
    this.get({
      '/tokens': function() {
        var res;
        res = stormkeeper.getTokens();
        util.log(res);
        return this.send(res);
      }
    });
    this.get('/tokens/:id', function() {
      return stormkeeper.getEntriesById('TOKENS', this.params.id, (function(_this) {
        return function(res) {
          util.log(res);
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(404);
          }
        };
      })(this));
    });
    this.post('/tokens', function() {
      var entry;
      util.log(this.body);
      entry = stormkeeper.newEntry(this.body, this.params.id);
      return stormkeeper.add('TOKENS', entry, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid token posting! " + res));
          }
        };
      })(this));
    });
    this.put('/tokens/:id', function() {
      var entry;
      entry = stormkeeper.newEntry(this.body, this.params.id);
      return stormkeeper.update('TOKENS', entry, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid token posting! " + res));
          }
        };
      })(this));
    });
    this.del('/tokens/:id', function() {
      return stormkeeper.remove('TOKENS', this.params.id, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send({
              deleted: true
            });
          } else {
            return _this.next(res);
          }
        };
      })(this));
    });
    this.get({
      '/rules': function() {
        var role;
        role = '';
        role = this.req.query.role;
        if (role) {
          return stormkeeper.getRulesbyRole(role, (function(_this) {
            return function(res) {
              util.log(res);
              if (!(res instanceof Error)) {
                return _this.send(res);
              } else {
                return _this.next(404);
              }
            };
          })(this));
        } else {
          return stormkeeper.getRules((function(_this) {
            return function(res) {
              util.log(res);
              if (!(res instanceof Error)) {
                return _this.send(res);
              } else {
                return _this.next(404);
              }
            };
          })(this));
        }
      }
    });
    this.get('/rules/:id', function() {
      return stormkeeper.getEntriesById('RULES', this.params.id, (function(_this) {
        return function(res) {
          util.log(res);
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(404);
          }
        };
      })(this));
    });
    this.post('/rules', function() {
      var entry;
      util.log(this.body);
      entry = stormkeeper.newEntry(this.body, this.params.id);
      return stormkeeper.add('RULES', entry, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid rule posting! " + res));
          }
        };
      })(this));
    });
    this.put('/rules/:id', function() {
      var entry;
      entry = stormkeeper.newEntry(this.body, this.params.id);
      return stormkeeper.update('RULES', entry, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid rule posting! " + res));
          }
        };
      })(this));
    });
    return this.del('/rules/:id', function() {
      return stormkeeper.remove('RULES', this.params.id, (function(_this) {
        return function(res) {
          if (!(res instanceof Error)) {
            return _this.send({
              deleted: true
            });
          } else {
            return _this.next(res);
          }
        };
      })(this));
    });
  };

}).call(this);
