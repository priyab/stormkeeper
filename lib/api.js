// Generated by CoffeeScript 1.6.1
(function() {
  var stormkeeper, util;

  stormkeeper = require('./stormkeeper')(this.include);

  util = require('util');

  this.include = function() {
    this.get({
      '/tokens': function() {
        var res;
        res = stormkeeper.getTokens();
        util.log(util.inspect(res));
        return this.send(res);
      }
    });
    this.get({
      '/tokens/:id': function() {
        var _this = this;
        return stormkeeper.getEntriesById('TOKENS', this.params.id, function(res) {
          util.log(util.inspect(res));
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(404);
          }
        });
      }
    });
    this.post({
      '/tokens': function() {
        var entry,
          _this = this;
        util.log(this.body);
        entry = stormkeeper.newEntry(this.body, '');
        return stormkeeper.add('TOKENS', entry, function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid token posting! " + res));
          }
        });
      }
    });
    this.put({
      '/tokens/:id': function() {
        var entry,
          _this = this;
        entry = stormkeeper.newEntry(this.body, this.params.id);
        return stormkeeper.update('TOKENS', entry, function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid token posting! " + res));
          }
        });
      }
    });
    this.del({
      '/tokens/:id': function() {
        var _this = this;
        return stormkeeper.remove('TOKENS', this.params.id, function(res) {
          if (!(res instanceof Error)) {
            return _this.send({
              deleted: true
            });
          } else {
            return _this.next(res);
          }
        });
      }
    });
    this.get({
      '/rules': function() {
        var role,
          _this = this;
        role = '';
        if (this.req.query.role != null) {
          role = this.req.query.role;
          util.log(util.inspect(this.req.query.role));
          return stormkeeper.getRulesbyRole(role, function(res) {
            util.log(res);
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(404);
            }
          });
        } else {
          return stormkeeper.getRules(function(res) {
            util.log(res);
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(404);
            }
          });
        }
      }
    });
    this.get({
      '/rules/:id': function() {
        var _this = this;
        return stormkeeper.getEntriesById('RULES', this.params.id, function(res) {
          util.log(res);
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(404);
          }
        });
      }
    });
    this.post({
      '/rules': function() {
        var entry,
          _this = this;
        util.log(util.inspect(this.body));
        entry = stormkeeper.newEntry(this.body, '');
        util.log(util.inspect(entry));
        return stormkeeper.add('RULES', entry, function(res) {
          if (!(res instanceof Error)) {
            util.log(util.inspect(res));
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid rule posting! " + res));
          }
        });
      }
    });
    this.put({
      '/rules/:id': function() {
        var entry,
          _this = this;
        entry = stormkeeper.newEntry(this.body, this.params.id);
        return stormkeeper.update('RULES', entry, function(res) {
          if (!(res instanceof Error)) {
            return _this.send(res);
          } else {
            return _this.next(new Error("Invalid rule posting! " + res));
          }
        });
      }
    });
    return this.del({
      '/rules/:id': function() {
        var _this = this;
        return stormkeeper.remove('RULES', this.params.id, function(res) {
          if (!(res instanceof Error)) {
            return _this.send({
              deleted: true
            });
          } else {
            return _this.next(res);
          }
        });
      }
    });
  };

}).call(this);
