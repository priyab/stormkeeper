// Generated by CoffeeScript 1.7.1
(function() {
  var StormKeeper;

  StormKeeper = require('./stormkeeper');

  this.include = function() {
    var agent;
    agent = this.settings.agent;

    /*
     * only uncomment during development...
    @get '/tokens': ->
        @send agent.tokens.list()
     */
    this.post({
      '/tokens': function() {
        return this.send(agent.authorize(new StormKeeper.StormToken(null, this.body)));
      }
    });
    this.get({
      '/tokens/:id': function() {
        var match;
        match = agent.tokens.get(this.params.id);
        if (match != null) {
          match.rule = agent.rules.get(match.ruleId);
          return this.send(match);
        } else {
          return this.send(404);
        }
      }
    });
    this.put({
      '/tokens/:id': function() {
        return this.send(new Error("updating token currently not supported!"));

        /*
        match = agent.tokens.get @params.id
        if match?
            @send agent.authorize match, @body
        else
            @send 404
         */
      }
    });
    this.del({
      '/tokens/:id': function() {
        var match;
        match = agent.tokens.get(this.params.id);
        if (match != null) {
          return this.send(agent.revoke(match != null ? match : 204));
        } else {
          return this.send(404);
        }
      }
    });
    this.get({
      '/rules': function() {
        return this.send(agent.rules.list());
      }
    });
    this.post({
      '/rules': function() {
        return this.send(agent.authorize(new StormKeeper.StormRule(null, this.body)));
      }
    });
    this.get({
      '/rules/:id': function() {
        var match;
        match = agent.rules.get(this.params.id);
        if (match != null) {
          return this.send(match);
        } else {
          return this.send(404);
        }
      }
    });
    this.put({
      '/rules/:id': function() {
        return this.send(new Error("updating rule currently not supported!"));

        /*
        match = agent.tokens.get @params.id
        if match?
            @send agent.authorize match, @body
        else
            @send 404
         */
      }
    });
    return this.del({
      '/rules/:id': function() {
        var match;
        match = agent.rules.get(this.params.id);
        if (match != null) {
          return this.send(agent.revoke(match != null ? match : 204));
        } else {
          return this.send(404);
        }
      }
    });
  };

}).call(this);
