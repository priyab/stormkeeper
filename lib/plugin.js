// Generated by CoffeeScript 1.7.1
(function() {
  this.include = function() {
    var agent, log;
    agent = this.settings.agent;
    log = agent.log;
    this.get({
      '/tokens': function() {
        var res;
        log("" + this.request.method + " " + this.request.url);
        res = agent.getTokens();
        log("result", res);
        return this.send(res);
      }
    });
    this.get({
      '/tokens/:id': function() {
        log("" + this.request.method + " " + this.request.url);
        return agent.getEntriesById('TOKENS', this.params.id, (function(_this) {
          return function(res) {
            log("result", res);
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.send(404);
            }
          };
        })(this));
      }
    });
    this.post({
      '/tokens': function() {
        var entry;
        log("" + this.request.method + " " + this.request.url);
        entry = agent.newEntry(this.body, '');
        return agent.add('TOKENS', entry, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.send(new Error("Invalid token posting! " + res));
            }
          };
        })(this));
      }
    });
    this.put({
      '/tokens/:id': function() {
        var entry;
        log("" + this.request.method + " " + this.request.url);
        entry = agent.newEntry(this.body, this.params.id);
        return agent.update('TOKENS', entry, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.send(new Error("Invalid token posting! " + res));
            }
          };
        })(this));
      }
    });
    this.del({
      '/tokens/:id': function() {
        log("" + this.request.method + " " + this.request.url);
        return agent.remove('TOKENS', this.params.id, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send({
                deleted: true
              });
            } else {
              return _this.send(res);
            }
          };
        })(this));
      }
    });
    this.get({
      '/rules': function() {
        var err, role;
        log("" + this.request.method + " " + this.request.url);
        try {
          if (this.request.query.role != null) {
            role = this.request.query.role;
          }
          return agent.getRules(role, (function(_this) {
            return function(rules) {
              if ((rules != null) && rules.length > 0) {
                log("" + _this.request.url + "\n", rules);
                return _this.send(rules);
              } else {
                return _this.send(404);
              }
            };
          })(this));
        } catch (_error) {
          err = _error;
          return this.send(err);
        }
      }
    });
    this.get({
      '/rules/:id': function() {
        log("" + this.request.method + " " + this.request.url);
        return agent.getEntriesById('RULES', this.params.id, (function(_this) {
          return function(res) {
            log(res);
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.send(404);
            }
          };
        })(this));
      }
    });
    this.post({
      '/rules': function() {
        var entry;
        log("" + this.request.method + " " + this.request.url);
        entry = agent.newEntry(this.body, '');
        log("result", entry);
        return agent.add('RULES', entry, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              log("result", res);
              return _this.send(res);
            } else {
              return _this.send(new Error("Invalid rule posting! " + res));
            }
          };
        })(this));
      }
    });
    this.put({
      '/rules/:id': function() {
        var entry;
        log("" + this.request.method + " " + this.request.url);
        entry = agent.newEntry(this.body, this.params.id);
        return agent.update('RULES', entry, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.send(new Error("Invalid rule posting! " + res));
            }
          };
        })(this));
      }
    });
    return this.del({
      '/rules/:id': function() {
        log("" + this.request.method + " " + this.request.url);
        return agent.remove('RULES', this.params.id, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send({
                deleted: true
              });
            } else {
              return _this.send(res);
            }
          };
        })(this));
      }
    });
  };

}).call(this);
