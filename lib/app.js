// Generated by CoffeeScript 1.7.1
(function() {
  var argv, config, error, fs, util;

  argv = require('optimist').usage('Start stormkeeper with a configuration file.\nUsage: $0').demand('c')["default"]('c', '/etc/stormstack/stormkeeper.json').alias('c', 'config').describe('c', 'location of stormkeeper configuration file').argv;

  util = require('util');

  util.log("stormkeeper coming up as new storm token collector...");

  fs = require('fs');

  config = null;

  try {
    config = JSON.parse(fs.readFileSync(argv.config));
  } catch (_error) {
    error = _error;
    util.log(error);
    util.log("stormkeeper using default storm parameters...");
    config = {
      port: 8333,
      logfile: "/var/log/stormkeeper.log",
      datadir: "/var/stormkeeper",
      serialKey: "unknown"
    };
  } finally {
    util.log("stormkeeper infused with " + JSON.stringify(config));
  }

  try {
    if (!fs.existsSync("" + config.datadir)) {
      fs.mkdirSync("" + config.datadir);
    }
    if (!fs.existsSync("" + config.datadir + "/db")) {
      fs.mkdirSync("" + config.datadir + "/db");
    }
    if (!fs.existsSync("" + config.datadir + "/certs")) {
      fs.mkdirSync("" + config.datadir + "/certs");
    }
  } catch (_error) {
    error = _error;
    util.log("Error in creating data dirs");
  }

  this.app = require('zappajs')(config.port, function() {
    this.configure((function(_this) {
      return function() {
        _this.use('bodyParser', 'methodOverride', _this.app.router, 'static');
        return _this.set({
          'basepath': '/v1.0'
        });
      };
    })(this));
    this.configure({
      development: (function(_this) {
        return function() {
          return _this.use({
            errorHandler: {
              dumpExceptions: true,
              showStack: true
            }
          });
        };
      })(this),
      production: (function(_this) {
        return function() {
          return _this.use('errorHandler');
        };
      })(this)
    });
    this.enable('serve jquery', 'minify');
    return this.include('./api');
  }).app;

}).call(this);
